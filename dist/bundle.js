(()=>{"use strict";var r={959:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}","",{version:3,sources:["webpack://./src/styles/board.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;;IAEZ,uBAAuB;AAC3B",sourcesContent:["\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}"],sourceRoot:""}]);const c=a},712:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}\r\n\r\n.mark {\r\n    background-color: rgba(0, 0, 0, .4);\r\n}","",{version:3,sources:["webpack://./src/styles/cellState.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,mCAAmC;AACvC",sourcesContent:[".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}\r\n\r\n.mark {\r\n    background-color: rgba(0, 0, 0, .4);\r\n}"],sourceRoot:""}]);const c=a},394:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./src/styles/center.css"],names:[],mappings:";AACA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,SAAS;IACT,UAAU;;IAEV,2BAA2B;;IAE3B,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}"],sourceRoot:""}]);const c=a},434:(r,n,e)=>{e.d(n,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,gBAAgB;IACb,sBAAsB;CACzB,aAAa;CACb,wBAAwB;IACrB,sBAAsB;AAC1B;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}"],sourceRoot:""}]);const c=a},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e=r(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(r,e,t){"string"==typeof r&&(r=[[null,r,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<r.length;c++){var u=[].concat(r[c]);t&&o[u[0]]||(e&&(u[2]?u[2]="".concat(e," and ").concat(u[2]):u[2]=e),n.push(u))}},n}},15:r=>{function n(r,n){(null==n||n>r.length)&&(n=r.length);for(var e=0,t=new Array(n);e<n;e++)t[e]=r[e];return t}r.exports=function(r){var e,t,o=(t=4,function(r){if(Array.isArray(r))return r}(e=r)||function(r,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(r)){var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=r[Symbol.iterator]();!(t=(a=c.next()).done)&&(e.push(a.value),!n||e.length!==n);t=!0);}catch(r){o=!0,i=r}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e}}(e,t)||function(r,e){if(r){if("string"==typeof r)return n(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(r,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(u," */"),l=a.sources.map((function(r){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(r," */")}));return[i].concat(l).concat([s]).join("\n")}return[i].join("\n")}},379:(r,n,e)=>{var t,o=function(){var r={};return function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}r[n]=e}return r[n]}}(),i=[];function a(r){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===r){n=e;break}return n}function c(r,n){for(var e={},t=[],o=0;o<r.length;o++){var c=r[o],u=n.base?c[0]+n.base:c[0],s=e[u]||0,l="".concat(u," ").concat(s);e[u]=s+1;var f=a(l),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:h(d,n),references:1}),t.push(l)}return t}function u(r){var n=document.createElement("style"),t=r.attributes||{};if(void 0===t.nonce){var i=e.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(r){n.setAttribute(r,t[r])})),"function"==typeof r.insert)r.insert(n);else{var a=o(r.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var s,l=(s=[],function(r,n){return s[r]=n,s.filter(Boolean).join("\n")});function f(r,n,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(r.styleSheet)r.styleSheet.cssText=l(n,o);else{var i=document.createTextNode(o),a=r.childNodes;a[n]&&r.removeChild(a[n]),a.length?r.insertBefore(i,a[n]):r.appendChild(i)}}function d(r,n,e){var t=e.css,o=e.media,i=e.sourceMap;if(o?r.setAttribute("media",o):r.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}var p=null,A=0;function h(r,n){var e,t,o;if(n.singleton){var i=A++;e=p||(p=u(n)),t=f.bind(null,e,i,!1),o=f.bind(null,e,i,!0)}else e=u(n),t=d.bind(null,e,n),o=function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)};return t(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap)return;t(r=n)}else o()}}r.exports=function(r,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=c(r=r||[],n);return function(r){if(r=r||[],"[object Array]"===Object.prototype.toString.call(r)){for(var t=0;t<e.length;t++){var o=a(e[t]);i[o].references--}for(var u=c(r,n),s=0;s<e.length;s++){var l=a(e[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}e=u}}}}},n={};function e(t){if(n[t])return n[t].exports;var o=n[t]={id:t,exports:{}};return r[t](o,o.exports,e),o.exports}e.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return e.d(n,{a:n}),n},e.d=(r,n)=>{for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),(()=>{function r(r){for(var n=arguments.length,e=Array(n>1?n-1:0),t=1;t<n;t++)e[t-1]=arguments[t];throw Error("[Immer] minified error nr: "+r+(e.length?" "+e.map((function(r){return"'"+r+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function n(r){return!!r&&!!r[_]}function t(r){return!!r&&(function(r){if(!r||"object"!=typeof r)return!1;var n=Object.getPrototypeOf(r);return!n||n===Object.prototype}(r)||Array.isArray(r)||!!r[U]||!!r.constructor[U]||u(r)||s(r))}function o(r,n,e){void 0===e&&(e=!1),0===i(r)?(e?Object.keys:F)(r).forEach((function(t){e&&"symbol"==typeof t||n(t,r[t],r)})):r.forEach((function(e,t){return n(t,e,r)}))}function i(r){var n=r[_];return n?n.i>3?n.i-4:n.i:Array.isArray(r)?1:u(r)?2:s(r)?3:0}function a(r,n){return 2===i(r)?r.has(n):Object.prototype.hasOwnProperty.call(r,n)}function c(r,n,e){var t=i(r);2===t?r.set(n,e):3===t?(r.delete(n),r.add(e)):r[n]=e}function u(r){return q&&r instanceof Map}function s(r){return L&&r instanceof Set}function l(r){return r.o||r.t}function f(r){if(Array.isArray(r))return Array.prototype.slice.call(r);var n=z(r);delete n[_];for(var e=F(n),t=0;t<e.length;t++){var o=e[t],i=n[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(n[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:r[o]})}return Object.create(Object.getPrototypeOf(r),n)}function d(r,e){return void 0===e&&(e=!1),A(r)||n(r)||!t(r)||(i(r)>1&&(r.set=r.add=r.clear=r.delete=p),Object.freeze(r),e&&o(r,(function(r,n){return d(n,!0)}),!0)),r}function p(){r(2)}function A(r){return null==r||"object"!=typeof r||Object.isFrozen(r)}function h(n){var e=Z[n];return e||r(18,n),e}function v(){return R}function m(r,n){n&&(h("Patches"),r.u=[],r.s=[],r.v=n)}function b(r){y(r),r.p.forEach(g),r.p=null}function y(r){r===R&&(R=r.l)}function C(r){return R={p:[],l:R,h:r,m:!0,_:0}}function g(r){var n=r[_];0===n.i||1===n.i?n.j():n.g=!0}function E(n,e){e._=e.p.length;var o=e.p[0],i=void 0!==n&&n!==o;return e.h.O||h("ES5").S(e,n,i),i?(o[_].P&&(b(e),r(4)),t(n)&&(n=w(e,n),e.l||k(e,n)),e.u&&h("Patches").M(o[_],n,e.u,e.s)):n=w(e,o,[]),b(e),e.u&&e.v(e.u,e.s),n!==D?n:void 0}function w(r,n,e){if(A(n))return n;var t=n[_];if(!t)return o(n,(function(o,i){return I(r,t,n,o,i,e)}),!0),n;if(t.A!==r)return n;if(!t.P)return k(r,t.t,!0),t.t;if(!t.I){t.I=!0,t.A._--;var i=4===t.i||5===t.i?t.o=f(t.k):t.o;o(3===t.i?new Set(i):i,(function(n,o){return I(r,t,i,n,o,e)})),k(r,i,!1),e&&r.u&&h("Patches").R(t,e,r.u,r.s)}return t.o}function I(r,e,o,i,u,s){if(n(u)){var l=w(r,u,s&&e&&3!==e.i&&!a(e.D,i)?s.concat(i):void 0);if(c(o,i,l),!n(l))return;r.m=!1}if(t(u)&&!A(u)){if(!r.h.N&&r._<1)return;w(r,u),e&&e.A.l||k(r,u)}}function k(r,n,e){void 0===e&&(e=!1),r.h.N&&r.m&&d(n,e)}function S(r,n){var e=r[_];return(e?l(e):r)[n]}function P(r,n){if(n in r)for(var e=Object.getPrototypeOf(r);e;){var t=Object.getOwnPropertyDescriptor(e,n);if(t)return t;e=Object.getPrototypeOf(e)}}function x(r){r.P||(r.P=!0,r.l&&x(r.l))}function T(r){r.o||(r.o=f(r.t))}function B(r,n,e){var t=u(n)?h("MapSet").T(n,e):s(n)?h("MapSet").F(n,e):r.O?function(r,n){var e=Array.isArray(r),t={i:e?1:0,A:n?n.A:v(),P:!1,I:!1,D:{},l:n,t:r,k:null,o:null,j:null,C:!1},o=t,i=K;e&&(o=[t],i=G);var a=Proxy.revocable(o,i),c=a.revoke,u=a.proxy;return t.k=u,t.j=c,u}(n,e):h("ES5").J(n,e);return(e?e.A:v()).p.push(t),t}function O(e){return n(e)||r(22,e),function r(n){if(!t(n))return n;var e,a=n[_],u=i(n);if(a){if(!a.P&&(a.i<4||!h("ES5").K(a)))return a.t;a.I=!0,e=j(n,u),a.I=!1}else e=j(n,u);return o(e,(function(n,t){a&&function(r,n){return 2===i(r)?r.get(n):r[n]}(a.t,n)===t||c(e,n,r(t))})),3===u?new Set(e):e}(e)}function j(r,n){switch(n){case 2:return new Map(r);case 3:return Array.from(r)}return f(r)}var N,R,M="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),q="undefined"!=typeof Map,L="undefined"!=typeof Set,W="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,D=M?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),U=M?Symbol.for("immer-draftable"):"__$immer_draftable",_=M?Symbol.for("immer-state"):"__$immer_state",F=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(r){return Object.getOwnPropertyNames(r).concat(Object.getOwnPropertySymbols(r))}:Object.getOwnPropertyNames),z=Object.getOwnPropertyDescriptors||function(r){var n={};return F(r).forEach((function(e){n[e]=Object.getOwnPropertyDescriptor(r,e)})),n},Z={},K={get:function(r,n){if(n===_)return r;var e=l(r);if(!a(e,n))return function(r,n,e){var t,o=P(n,e);return o?"value"in o?o.value:null===(t=o.get)||void 0===t?void 0:t.call(r.k):void 0}(r,e,n);var o=e[n];return r.I||!t(o)?o:o===S(r.t,n)?(T(r),r.o[n]=B(r.A.h,o,r)):o},has:function(r,n){return n in l(r)},ownKeys:function(r){return Reflect.ownKeys(l(r))},set:function(r,n,e){var t=P(l(r),n);if(null==t?void 0:t.set)return t.set.call(r.k,e),!0;if(!r.P){var o=S(l(r),n),i=null==o?void 0:o[_];if(i&&i.t===e)return r.o[n]=e,r.D[n]=!1,!0;if(function(r,n){return r===n?0!==r||1/r==1/n:r!=r&&n!=n}(e,o)&&(void 0!==e||a(r.t,n)))return!0;T(r),x(r)}return r.o[n]=e,r.D[n]=!0,!0},deleteProperty:function(r,n){return void 0!==S(r.t,n)||n in r.t?(r.D[n]=!1,T(r),x(r)):delete r.D[n],r.o&&delete r.o[n],!0},getOwnPropertyDescriptor:function(r,n){var e=l(r),t=Reflect.getOwnPropertyDescriptor(e,n);return t?{writable:!0,configurable:1!==r.i||"length"!==n,enumerable:t.enumerable,value:e[n]}:t},defineProperty:function(){r(11)},getPrototypeOf:function(r){return Object.getPrototypeOf(r.t)},setPrototypeOf:function(){r(12)}},G={};o(K,(function(r,n){G[r]=function(){return arguments[0]=arguments[0][0],n.apply(this,arguments)}})),G.deleteProperty=function(r,n){return K.deleteProperty.call(this,r[0],n)},G.set=function(r,n,e){return K.set.call(this,r[0],n,e,r[0])};var H=new(function(){function e(r){this.O=W,this.N=!0,"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=e.prototype;return o.produce=function(n,e,o){if("function"==typeof n&&"function"!=typeof e){var i=e;e=n;var a=this;return function(r){var n=this;void 0===r&&(r=i);for(var t=arguments.length,o=Array(t>1?t-1:0),c=1;c<t;c++)o[c-1]=arguments[c];return a.produce(r,(function(r){var t;return(t=e).call.apply(t,[n,r].concat(o))}))}}var c;if("function"!=typeof e&&r(6),void 0!==o&&"function"!=typeof o&&r(7),t(n)){var u=C(this),s=B(this,n,void 0),l=!0;try{c=e(s),l=!1}finally{l?b(u):y(u)}return"undefined"!=typeof Promise&&c instanceof Promise?c.then((function(r){return m(u,o),E(r,u)}),(function(r){throw b(u),r})):(m(u,o),E(c,u))}if(!n||"object"!=typeof n){if((c=e(n))===D)return;return void 0===c&&(c=n),this.N&&d(c,!0),c}r(21,n)},o.produceWithPatches=function(r,n){var e,t,o=this;return"function"==typeof r?function(n){for(var e=arguments.length,t=Array(e>1?e-1:0),i=1;i<e;i++)t[i-1]=arguments[i];return o.produceWithPatches(n,(function(n){return r.apply(void 0,[n].concat(t))}))}:[this.produce(r,n,(function(r,n){e=r,t=n})),e,t]},o.createDraft=function(e){t(e)||r(8),n(e)&&(e=O(e));var o=C(this),i=B(this,e,void 0);return i[_].C=!0,y(o),i},o.finishDraft=function(r,n){var e=(r&&r[_]).A;return m(e,n),E(void 0,e)},o.setAutoFreeze=function(r){this.N=r},o.setUseProxies=function(n){n&&!W&&r(20),this.O=n},o.applyPatches=function(r,e){var t;for(t=e.length-1;t>=0;t--){var o=e[t];if(0===o.path.length&&"replace"===o.op){r=o.value;break}}var i=h("Patches").$;return n(r)?i(r,e):this.produce(r,(function(r){return i(r,e.slice(t+1))}))},e}()),Y=H.produce;H.produceWithPatches.bind(H),H.setAutoFreeze.bind(H),H.setUseProxies.bind(H),H.applyPatches.bind(H),H.createDraft.bind(H),H.finishDraft.bind(H);const V=Y;var X=e(379),$=e.n(X),J=e(434);$()(J.Z,{insert:"head",singleton:!1}),J.Z.locals;var Q=e(394);$()(Q.Z,{insert:"head",singleton:!1}),Q.Z.locals;var rr=e(959);$()(rr.Z,{insert:"head",singleton:!1}),rr.Z.locals;var nr,er=e(712);$()(er.Z,{insert:"head",singleton:!1}),er.Z.locals,function(r){r[r.EMPTY=0]="EMPTY",r[r.STATIC=1]="STATIC",r[r.ACTIVE=2]="ACTIVE",r[r.MARK=3]="MARK"}(nr||(nr={}));var tr,or=function(r,n){for(var e=0,t=n.length,o=r.length;e<t;e++,o++)r[o]=n[e];return r},ir=or([],Array(10)).map((function(r){return 0})),ar=or([],Array(24)).map((function(){return or([],ir)})),cr=function(r){var n=document.createElement("div");return r.forEach((function(r,e){var t=document.createElement("div");t.className="row",r.forEach((function(r,n){var e=document.createElement("div"),o=nr.EMPTY,i=nr.STATIC,a=nr.ACTIVE,c=nr.MARK;switch(r){case o:e.className="cell empty";break;case i:e.className="cell static";break;case a:e.className="cell active";break;case c:e.className="cell mark";break;default:throw new Error("unidentified cell")}t.appendChild(e)})),n.appendChild(t)})),n.className="board",n},ur=function(r,n){for(var e=0,t=n.length,o=r.length;e<t;e++,o++)r[o]=n[e];return r},sr=function(r){var n=[r.pivot],e=r.forms[r.form].map((function(n){var e=n[0],t=n[1];return[r.pivot[0]+e,r.pivot[1]+t]}));return ur(ur([],n),e)};!function(r){r.CCW="w",r.CW="r",r.LEFT="s",r.RIGHT="f",r.PLUNGE="d"}(tr||(tr={}));var lr=function(r,n,e){switch(e){case tr.CCW:return fr(r,n);case tr.CW:return dr(r,n);case tr.LEFT:return pr(r,n);case tr.RIGHT:return Ar(r,n);case tr.PLUNGE:return hr(r,n)}},fr=function(r,n){var e=V(r,(function(r){return 0===r.form?r.form=r.forms.length-1:r.form-=1,r})),t=sr(e),o=!0;return t.forEach((function(r){var e=r[0],t=r[1];e>23||n[e][t]===nr.STATIC?o=!1:0!==t&&t!==n[0].length||(o=!1)})),o},dr=function(r,n){var e=V(r,(function(r){return r.form===r.forms.length-1?r.form=0:r.form+=1,r})),t=sr(e),o=!0;return t.forEach((function(r){var e=r[0],t=r[1];e>23||n[e][t]===nr.STATIC?o=!1:0!==t&&t!==n[0].length||(o=!1)})),o},pr=function(r,n){var e=V(r,(function(r){return r.pivot[1]-=1,r})),t=sr(e),o=!0;return t.forEach((function(r){var e=r[0],t=r[1];(n[e][t]===nr.STATIC||-1===t)&&(o=!1)})),o},Ar=function(r,n){var e=V(r,(function(r){return r.pivot[1]+=1,r})),t=sr(e),o=!0;return t.forEach((function(r){var e=r[0],t=r[1];(n[e][t]===nr.STATIC||t===n[0].length)&&(o=!1)})),o},hr=function(r,n){var e=V(r,(function(r){r.pivot[0]+=1})),t=sr(e),o=!0;return t.forEach((function(r){var e=r[0],t=r[1];(e>23||n[e][t]===nr.STATIC)&&(o=!1)})),o},vr=function(r){return V(r,(function(r){r.pivot[0]+=1}))},mr=function(r,n){var e=function(r){return Array.from(r.childNodes).forEach((function(r){Array.from(r.childNodes).forEach((function(r){"cell active"===r.className&&(r.className="cell empty")}))})),r}(r);return function(r,n){return r.forEach((function(r){var e=r[0],t=r[1];n.childNodes[e].childNodes[t].className="cell active"})),n}(sr(n),e)},br=[];br.push({pivot:[1,4],form:0,forms:[[[-1,0]],[[0,1]],[[1,0]],[[0,-1]]]}),br.push({pivot:[1,4],form:0,forms:[[[-1,0],[1,0],[2,0]],[[0,-2],[0,-1],[0,1]],[[-2,0],[-1,0],[1,0]],[[0,-1],[0,1],[0,2]]]}),br.push({pivot:[2,4],form:0,forms:[[[0,-1],[-1,0],[-2,0]],[[-1,0],[0,1],[0,2]],[[0,1],[1,0],[2,0]],[[0,-2],[0,-1],[-1,0]]]}),br.push({pivot:[2,4],form:0,forms:[[[-2,0],[-1,0],[0,1]],[[1,0],[0,1],[0,2]],[[0,-1],[1,0],[2,0]],[[0,-2],[0,-1],[-1,0]]]});var yr=function(r){return V(r[Math.floor(Math.random()*r.length)],(function(r){return r}))},Cr=document.querySelector("body"),gr=V(ar,(function(r){return r})),Er=cr(gr);Cr.appendChild(function(){var r=document.createElement("div");r.className="head";var n=document.createElement("h1");n.textContent="Tetris!",r.appendChild(n);var e=document.createElement("div");e.className="dashboard";var t,o=function(){var r=document.createElement("button");return r.className="start_btn",r.textContent="Click to Start!",r}(),i=function(){var r=document.createElement("button");return r.className="end_btn",r.textContent="Click to End!",r}(),a=function(){var r=document.createElement("button");return r.className="reset_btn",r.textContent="Click to Reset!",r}();function c(){clearInterval(t),e.removeChild(i),e.appendChild(a)}return e.appendChild(o),o.addEventListener("click",(function(){var r=document.querySelector(".board"),n=document.querySelector("body");t=function(r,n,e){var t=yr(br),o=ar,i=n;return console.log("board X length",o[0].length),document.addEventListener("keydown",(function(r){switch(r.key){case tr.CCW:lr(t,o,tr.CCW)&&(0===t.form?(t=V(t,(function(r){return r.form=r.forms.length-1,r})),a()):(t=V(t,(function(r){return r.form-=1,r})),a()));break;case tr.CW:lr(t,o,tr.CW)&&(t.form===t.forms.length-1?(t=V(t,(function(r){return r.form=0,r})),a()):(t=V(t,(function(r){return r.form+=1,r})),a()));break;case tr.LEFT:lr(t,o,tr.LEFT)&&(0===t.pivot[1]||(t=V(t,(function(r){return r.pivot[1]-=1,r}))),a());break;case tr.RIGHT:lr(t,o,tr.RIGHT)&&(t.pivot[1]===o[0].length-1||(t=V(t,(function(r){return r.pivot[1]+=1,r})),a()));break;case tr.PLUNGE:lr(t,o,tr.PLUNGE)&&(t=vr(t),a())}})),setInterval((function(){if(function(r,n){var e=sr(r),t=!0;return e.forEach((function(r){var e=r[0],o=r[1];n[e][o]===nr.STATIC&&(t=!1)})),t}(t,o)&&function(r){return r.reduce((function(r,n){return n!==nr.STATIC&&r}),!0)}(o[0])||e(),lr(t,o,tr.PLUNGE))t=vr(t),a();else{var n=function(r){var n=[];return{coloredSTATEboard:V(r,(function(r){return r.map((function(r,e){return r.reduce((function(r,n){return n===nr.STATIC&&r}),!0)?(n.push(e),r.map((function(r){return nr.MARK}))):r}))})),coloredRows:n}}(o=function(r,n){var e=sr(r);return V(n,(function(r){e.forEach((function(n){var e=n[0],t=n[1];r[e][t]=nr.STATIC}))}))}(t,o)),c=n.coloredSTATEboard;n.coloredRows.length&&(o=function(r){for(var n=[],e=r.length-1;e>-1;e--)r[e][0]===nr.MARK&&n.push(e);return V(r,(function(r){for(var e=0;e<n.length;e++)for(var t=n[e]+e-1;t>-1;t--)r[t+1]=r[t].map((function(r){return r}));return r}))}(o=c)),r.removeChild(i),i=cr(o),t=yr(br),i=mr(i,t),r.appendChild(i)}}),100);function a(){r.removeChild(i),i=mr(i,t),r.appendChild(i)}}(n,r,c),e.removeChild(o),e.appendChild(i)})),i.addEventListener("click",(function(){c()})),a.addEventListener("click",(function(){!function(){var r=document.querySelector("body"),n=document.querySelector(".board");r.removeChild(n)}(),function(){var r=V(ar,(function(r){return r})),n=cr(r);document.querySelector("body").appendChild(n)}(),e.removeChild(a),e.appendChild(o)})),r.appendChild(e),r}()),Cr.appendChild(Er)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,