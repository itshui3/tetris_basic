(()=>{"use strict";var e={959:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,"\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}","",{version:3,sources:["webpack://./src/styles/board.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;;IAEZ,uBAAuB;AAC3B",sourcesContent:["\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}"],sourceRoot:""}]);const c=a},712:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}","",{version:3,sources:["webpack://./src/styles/cellState.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}"],sourceRoot:""}]);const c=a},394:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,"\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./src/styles/center.css"],names:[],mappings:";AACA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,SAAS;IACT,UAAU;;IAEV,2BAA2B;;IAE3B,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}"],sourceRoot:""}]);const c=a},434:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([e.id,"html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,gBAAgB;IACb,sBAAsB;CACzB,aAAa;CACb,wBAAwB;IACrB,sBAAsB;AAC1B;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=e(n);return n[2]?"@media ".concat(n[2]," {").concat(r,"}"):r})).join("")},n.i=function(e,r,t){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);t&&o[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),n.push(u))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}e.exports=function(e){var r,t,o=(t=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],t=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(t=(a=c.next()).done)&&(r.push(a.value),!n||r.length!==n);t=!0);}catch(e){o=!0,i=e}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return r}}(r,t)||function(e,r){if(e){if("string"==typeof e)return n(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(u," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([l]).join("\n")}return[i].join("\n")}},379:(e,n,r)=>{var t,o=function(){var e={};return function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[n]=r}return e[n]}}(),i=[];function a(e){for(var n=-1,r=0;r<i.length;r++)if(i[r].identifier===e){n=r;break}return n}function c(e,n){for(var r={},t=[],o=0;o<e.length;o++){var c=e[o],u=n.base?c[0]+n.base:c[0],l=r[u]||0,s="".concat(u," ").concat(l);r[u]=l+1;var f=a(s),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:h(d,n),references:1}),t.push(s)}return t}function u(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var i=r.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,s=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function f(e,n,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=s(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function d(e,n,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var p=null,A=0;function h(e,n){var r,t,o;if(n.singleton){var i=A++;r=p||(p=u(n)),t=f.bind(null,r,i,!1),o=f.bind(null,r,i,!0)}else r=u(n),t=d.bind(null,r,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var r=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<r.length;t++){var o=a(r[t]);i[o].references--}for(var u=c(e,n),l=0;l<r.length;l++){var s=a(r[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}r=u}}}}},n={};function r(t){if(n[t])return n[t].exports;var o=n[t]={id:t,exports:{}};return e[t](o,o.exports,r),o.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{function e(e){for(var n=arguments.length,r=Array(n>1?n-1:0),t=1;t<n;t++)r[t-1]=arguments[t];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function n(e){return!!e&&!!e[Z]}function t(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var n=Object.getPrototypeOf(e);return!n||n===Object.prototype}(e)||Array.isArray(e)||!!e[U]||!!e.constructor[U]||u(e)||l(e))}function o(e,n,r){void 0===r&&(r=!1),0===i(e)?(r?Object.keys:W)(e).forEach((function(t){r&&"symbol"==typeof t||n(t,e[t],e)})):e.forEach((function(r,t){return n(t,r,e)}))}function i(e){var n=e[Z];return n?n.i>3?n.i-4:n.i:Array.isArray(e)?1:u(e)?2:l(e)?3:0}function a(e,n){return 2===i(e)?e.has(n):Object.prototype.hasOwnProperty.call(e,n)}function c(e,n,r){var t=i(e);2===t?e.set(n,r):3===t?(e.delete(n),e.add(r)):e[n]=r}function u(e){return D&&e instanceof Map}function l(e){return R&&e instanceof Set}function s(e){return e.o||e.t}function f(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var n=F(e);delete n[Z];for(var r=W(n),t=0;t<r.length;t++){var o=r[t],i=n[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(n[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),n)}function d(e,r){return void 0===r&&(r=!1),A(e)||n(e)||!t(e)||(i(e)>1&&(e.set=e.add=e.clear=e.delete=p),Object.freeze(e),r&&o(e,(function(e,n){return d(n,!0)}),!0)),e}function p(){e(2)}function A(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function h(n){var r=L[n];return r||e(18,n),r}function v(){return q}function b(e,n){n&&(h("Patches"),e.u=[],e.s=[],e.v=n)}function m(e){y(e),e.p.forEach(C),e.p=null}function y(e){e===q&&(q=e.l)}function g(e){return q={p:[],l:q,h:e,m:!0,_:0}}function C(e){var n=e[Z];0===n.i||1===n.i?n.j():n.g=!0}function w(n,r){r._=r.p.length;var o=r.p[0],i=void 0!==n&&n!==o;return r.h.O||h("ES5").S(r,n,i),i?(o[Z].P&&(m(r),e(4)),t(n)&&(n=x(r,n),r.l||S(r,n)),r.u&&h("Patches").M(o[Z],n,r.u,r.s)):n=x(r,o,[]),m(r),r.u&&r.v(r.u,r.s),n!==z?n:void 0}function x(e,n,r){if(A(n))return n;var t=n[Z];if(!t)return o(n,(function(o,i){return I(e,t,n,o,i,r)}),!0),n;if(t.A!==e)return n;if(!t.P)return S(e,t.t,!0),t.t;if(!t.I){t.I=!0,t.A._--;var i=4===t.i||5===t.i?t.o=f(t.k):t.o;o(3===t.i?new Set(i):i,(function(n,o){return I(e,t,i,n,o,r)})),S(e,i,!1),r&&e.u&&h("Patches").R(t,r,e.u,e.s)}return t.o}function I(e,r,o,i,u,l){if(n(u)){var s=x(e,u,l&&r&&3!==r.i&&!a(r.D,i)?l.concat(i):void 0);if(c(o,i,s),!n(s))return;e.m=!1}if(t(u)&&!A(u)){if(!e.h.N&&e._<1)return;x(e,u),r&&r.A.l||S(e,u)}}function S(e,n,r){void 0===r&&(r=!1),e.h.N&&e.m&&d(n,r)}function P(e,n){var r=e[Z];return(r?s(r):e)[n]}function k(e,n){if(n in e)for(var r=Object.getPrototypeOf(e);r;){var t=Object.getOwnPropertyDescriptor(r,n);if(t)return t;r=Object.getPrototypeOf(r)}}function E(e){e.P||(e.P=!0,e.l&&E(e.l))}function B(e){e.o||(e.o=f(e.t))}function O(e,n,r){var t=u(n)?h("MapSet").T(n,r):l(n)?h("MapSet").F(n,r):e.O?function(e,n){var r=Array.isArray(e),t={i:r?1:0,A:n?n.A:v(),P:!1,I:!1,D:{},l:n,t:e,k:null,o:null,j:null,C:!1},o=t,i=Y;r&&(o=[t],i=K);var a=Proxy.revocable(o,i),c=a.revoke,u=a.proxy;return t.k=u,t.j=c,u}(n,r):h("ES5").J(n,r);return(r?r.A:v()).p.push(t),t}function j(r){return n(r)||e(22,r),function e(n){if(!t(n))return n;var r,a=n[Z],u=i(n);if(a){if(!a.P&&(a.i<4||!h("ES5").K(a)))return a.t;a.I=!0,r=T(n,u),a.I=!1}else r=T(n,u);return o(r,(function(n,t){a&&function(e,n){return 2===i(e)?e.get(n):e[n]}(a.t,n)===t||c(r,n,e(t))})),3===u?new Set(r):r}(r)}function T(e,n){switch(n){case 2:return new Map(e);case 3:return Array.from(e)}return f(e)}var N,q,M="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),D="undefined"!=typeof Map,R="undefined"!=typeof Set,_="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,z=M?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),U=M?Symbol.for("immer-draftable"):"__$immer_draftable",Z=M?Symbol.for("immer-state"):"__$immer_state",W=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),F=Object.getOwnPropertyDescriptors||function(e){var n={};return W(e).forEach((function(r){n[r]=Object.getOwnPropertyDescriptor(e,r)})),n},L={},Y={get:function(e,n){if(n===Z)return e;var r=s(e);if(!a(r,n))return function(e,n,r){var t,o=k(n,r);return o?"value"in o?o.value:null===(t=o.get)||void 0===t?void 0:t.call(e.k):void 0}(e,r,n);var o=r[n];return e.I||!t(o)?o:o===P(e.t,n)?(B(e),e.o[n]=O(e.A.h,o,e)):o},has:function(e,n){return n in s(e)},ownKeys:function(e){return Reflect.ownKeys(s(e))},set:function(e,n,r){var t=k(s(e),n);if(null==t?void 0:t.set)return t.set.call(e.k,r),!0;if(!e.P){var o=P(s(e),n),i=null==o?void 0:o[Z];if(i&&i.t===r)return e.o[n]=r,e.D[n]=!1,!0;if(function(e,n){return e===n?0!==e||1/e==1/n:e!=e&&n!=n}(r,o)&&(void 0!==r||a(e.t,n)))return!0;B(e),E(e)}return e.o[n]=r,e.D[n]=!0,!0},deleteProperty:function(e,n){return void 0!==P(e.t,n)||n in e.t?(e.D[n]=!1,B(e),E(e)):delete e.D[n],e.o&&delete e.o[n],!0},getOwnPropertyDescriptor:function(e,n){var r=s(e),t=Reflect.getOwnPropertyDescriptor(r,n);return t?{writable:!0,configurable:1!==e.i||"length"!==n,enumerable:t.enumerable,value:r[n]}:t},defineProperty:function(){e(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){e(12)}},K={};o(Y,(function(e,n){K[e]=function(){return arguments[0]=arguments[0][0],n.apply(this,arguments)}})),K.deleteProperty=function(e,n){return Y.deleteProperty.call(this,e[0],n)},K.set=function(e,n,r){return Y.set.call(this,e[0],n,r,e[0])};var V=new(function(){function r(e){this.O=_,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=r.prototype;return o.produce=function(n,r,o){if("function"==typeof n&&"function"!=typeof r){var i=r;r=n;var a=this;return function(e){var n=this;void 0===e&&(e=i);for(var t=arguments.length,o=Array(t>1?t-1:0),c=1;c<t;c++)o[c-1]=arguments[c];return a.produce(e,(function(e){var t;return(t=r).call.apply(t,[n,e].concat(o))}))}}var c;if("function"!=typeof r&&e(6),void 0!==o&&"function"!=typeof o&&e(7),t(n)){var u=g(this),l=O(this,n,void 0),s=!0;try{c=r(l),s=!1}finally{s?m(u):y(u)}return"undefined"!=typeof Promise&&c instanceof Promise?c.then((function(e){return b(u,o),w(e,u)}),(function(e){throw m(u),e})):(b(u,o),w(c,u))}if(!n||"object"!=typeof n){if((c=r(n))===z)return;return void 0===c&&(c=n),this.N&&d(c,!0),c}e(21,n)},o.produceWithPatches=function(e,n){var r,t,o=this;return"function"==typeof e?function(n){for(var r=arguments.length,t=Array(r>1?r-1:0),i=1;i<r;i++)t[i-1]=arguments[i];return o.produceWithPatches(n,(function(n){return e.apply(void 0,[n].concat(t))}))}:[this.produce(e,n,(function(e,n){r=e,t=n})),r,t]},o.createDraft=function(r){t(r)||e(8),n(r)&&(r=j(r));var o=g(this),i=O(this,r,void 0);return i[Z].C=!0,y(o),i},o.finishDraft=function(e,n){var r=(e&&e[Z]).A;return b(r,n),w(void 0,r)},o.setAutoFreeze=function(e){this.N=e},o.setUseProxies=function(n){n&&!_&&e(20),this.O=n},o.applyPatches=function(e,r){var t;for(t=r.length-1;t>=0;t--){var o=r[t];if(0===o.path.length&&"replace"===o.op){e=o.value;break}}var i=h("Patches").$;return n(e)?i(e,r):this.produce(e,(function(e){return i(e,r.slice(t+1))}))},r}()),H=V.produce;V.produceWithPatches.bind(V),V.setAutoFreeze.bind(V),V.setUseProxies.bind(V),V.applyPatches.bind(V),V.createDraft.bind(V),V.finishDraft.bind(V);const X=H;var $=r(379),J=r.n($),Q=r(434);J()(Q.Z,{insert:"head",singleton:!1}),Q.Z.locals;var G=r(394);J()(G.Z,{insert:"head",singleton:!1}),G.Z.locals;var ee=r(959);J()(ee.Z,{insert:"head",singleton:!1}),ee.Z.locals;var ne,re=r(712);J()(re.Z,{insert:"head",singleton:!1}),re.Z.locals,function(e){e[e.EMPTY=0]="EMPTY",e[e.STATIC=1]="STATIC",e[e.ACTIVE=2]="ACTIVE"}(ne||(ne={}));var te=function(e,n){for(var r=0,t=n.length,o=e.length;r<t;r++,o++)e[o]=n[r];return e},oe=te([],Array(10)).map((function(e){return 0})),ie=te([],Array(24)).map((function(){return te([],oe)})),ae=function(e){var n=document.createElement("div");return e.forEach((function(e,r){var t=document.createElement("div");t.className="row",e.forEach((function(e,n){var r=document.createElement("div"),o=ne.EMPTY,i=ne.STATIC,a=ne.ACTIVE;switch(e){case o:r.className="cell empty";break;case i:r.className="cell static";break;case a:r.className="cell active";break;default:throw new Error("unidentified cell")}t.appendChild(r)})),n.appendChild(t)})),n.className="board",n},ce=function(e,n){for(var r=0,t=n.length,o=e.length;r<t;r++,o++)e[o]=n[r];return e},ue=function(e){var n=[e.pivot],r=e.forms[e.form].map((function(n){var r=n[0],t=n[1];return[e.pivot[0]+r,e.pivot[1]+t]}));return ce(ce([],n),r)},le=function(e,n){var r=function(e){return Array.from(e.childNodes).forEach((function(e){Array.from(e.childNodes).forEach((function(e){"cell active"===e.className&&(e.className="cell empty")}))})),e}(e);return function(e,n){return e.forEach((function(e){var r=e[0],t=e[1];n.childNodes[r].childNodes[t].className="cell active"})),n}(ue(n),r)},se=[];se.push({pivot:[1,4],form:0,forms:[[[-1,0]],[[0,1]],[[1,0]],[[0,-1]]]});var fe=function(e){return X(e[Math.floor(Math.random()*e.length)],(function(e){return e}))},de=document.querySelector("body"),pe=X(ie,(function(e){return e})),Ae=ae(pe);de.appendChild(function(){var e=document.createElement("div");e.className="head";var n=document.createElement("h1");n.textContent="Tetris!",e.appendChild(n);var r=document.createElement("div");r.className="dashboard";var t,o=function(){var e=document.createElement("button");return e.className="start_btn",e.textContent="Click to Start!",e}(),i=function(){var e=document.createElement("button");return e.className="end_btn",e.textContent="Click to End!",e}(),a=function(){var e=document.createElement("button");return e.className="reset_btn",e.textContent="Click to Reset!",e}();function c(){clearInterval(t),r.removeChild(i),r.appendChild(a)}return r.appendChild(o),o.addEventListener("click",(function(){var e=document.querySelector(".board"),n=document.querySelector("body");t=function(e,n,r){var t=fe(se),o=ie,i=n;return setInterval((function(){var n,a,c,u;n=o,a=X(t,(function(e){e.pivot[0]+=1})),c=ue(a),u=!0,c.forEach((function(e){var r=e[0],t=e[1];(r>23||n[r][t]===ne.STATIC)&&(u=!1)})),u?(t=X(t,(function(e){e.pivot[0]+=1})),e.removeChild(i),i=le(i,t),e.appendChild(i)):(e.removeChild(i),o=function(e,n){var r=ue(e);return console.log("transformDeez",r),X(n,(function(e){r.forEach((function(n){var r=n[0],t=n[1];e[r][t]=ne.STATIC}))}))}(t,o),i=ae(o),function(e,n){var r=ue(e),t=!0;return r.forEach((function(e){var r=e[0],o=e[1];n[r][o]===ne.STATIC&&(t=!1)})),t}(t=fe(se),o)&&function(e){return e.reduce((function(e,n){return n!==ne.STATIC&&e}),!0)}(o[0])||r(),i=le(i,t),e.appendChild(i))}),100)}(n,e,c),r.removeChild(o),r.appendChild(i)})),i.addEventListener("click",(function(){c()})),a.addEventListener("click",(function(){!function(){var e=document.querySelector("body"),n=document.querySelector(".board");e.removeChild(n)}(),function(){var e=X(ie,(function(e){return e})),n=ae(e);document.querySelector("body").appendChild(n)}(),r.removeChild(a),r.appendChild(o)})),e.appendChild(r),e}()),de.appendChild(Ae)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,