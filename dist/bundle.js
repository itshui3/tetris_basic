(()=>{"use strict";var n={959:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,"\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}","",{version:3,sources:["webpack://./src/styles/board.css"],names:[],mappings:";AACA;IACI,aAAa;IACb,sBAAsB;;AAE1B;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;;IAEZ,uBAAuB;AAC3B",sourcesContent:["\r\n.board {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.cell {\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    border: 1px solid black;\r\n}"],sourceRoot:""}]);const c=a},712:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}","",{version:3,sources:["webpack://./src/styles/cellState.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kCAAkC;AACtC",sourcesContent:[".empty {\r\n    background-color: white;\r\n}\r\n\r\n.static {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.active {\r\n    background-color: rgba(0, 0, 0, 1);\r\n}"],sourceRoot:""}]);const c=a},394:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,"\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./src/styles/center.css"],names:[],mappings:";AACA;IACI,kBAAkB;IAClB,QAAQ;IACR,WAAW;IACX,SAAS;IACT,UAAU;;IAEV,2BAA2B;;IAE3B,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["\r\nbody {\r\n    position: absolute;\r\n    top: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    right: 0px;\r\n    \r\n    background-color: lightgrey;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}"],sourceRoot:""}]);const c=a},434:(n,r,e)=>{e.d(r,{Z:()=>c});var t=e(15),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,"html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,gBAAgB;IACb,sBAAsB;CACzB,aAAa;CACb,wBAAwB;IACrB,sBAAsB;AAC1B;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 62.5%;\r\n    font-family: monospace;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n    box-sizing: border-box;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}"],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<n.length;c++){var u=[].concat(n[c]);t&&o[u[0]]||(e&&(u[2]?u[2]="".concat(e," and ").concat(u[2]):u[2]=e),r.push(u))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(n)){var e=[],t=!0,o=!1,i=void 0;try{for(var a,c=n[Symbol.iterator]();!(t=(a=c.next()).done)&&(e.push(a.value),!r||e.length!==r);t=!0);}catch(n){o=!0,i=n}finally{try{t||null==c.return||c.return()}finally{if(o)throw i}}return e}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(u," */"),s=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(s).concat([l]).join("\n")}return[i].join("\n")}},379:(n,r,e)=>{var t,o=function(){var n={};return function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[r]=e}return n[r]}}(),i=[];function a(n){for(var r=-1,e=0;e<i.length;e++)if(i[e].identifier===n){r=e;break}return r}function c(n,r){for(var e={},t=[],o=0;o<n.length;o++){var c=n[o],u=r.base?c[0]+r.base:c[0],l=e[u]||0,s="".concat(u," ").concat(l);e[u]=l+1;var f=a(s),d={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:h(d,r),references:1}),t.push(s)}return t}function u(n){var r=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var i=e.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(n){r.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(r);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(r)}return r}var l,s=(l=[],function(n,r){return l[n]=r,l.filter(Boolean).join("\n")});function f(n,r,e,t){var o=e?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=s(r,o);else{var i=document.createTextNode(o),a=n.childNodes;a[r]&&n.removeChild(a[r]),a.length?n.insertBefore(i,a[r]):n.appendChild(i)}}function d(n,r,e){var t=e.css,o=e.media,i=e.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var p=null,A=0;function h(n,r){var e,t,o;if(r.singleton){var i=A++;e=p||(p=u(r)),t=f.bind(null,e,i,!1),o=f.bind(null,e,i,!0)}else e=u(r),t=d.bind(null,e,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return t(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;t(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var e=c(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<e.length;t++){var o=a(e[t]);i[o].references--}for(var u=c(n,r),l=0;l<e.length;l++){var s=a(e[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}e=u}}}}},r={};function e(t){if(r[t])return r[t].exports;var o=r[t]={id:t,exports:{}};return n[t](o,o.exports,e),o.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{function n(n){for(var r=arguments.length,e=Array(r>1?r-1:0),t=1;t<r;t++)e[t-1]=arguments[t];throw Error("[Immer] minified error nr: "+n+(e.length?" "+e.map((function(n){return"'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(n){return!!n&&!!n[_]}function t(n){return!!n&&(function(n){if(!n||"object"!=typeof n)return!1;var r=Object.getPrototypeOf(n);return!r||r===Object.prototype}(n)||Array.isArray(n)||!!n[U]||!!n.constructor[U]||u(n)||l(n))}function o(n,r,e){void 0===e&&(e=!1),0===i(n)?(e?Object.keys:F)(n).forEach((function(t){e&&"symbol"==typeof t||r(t,n[t],n)})):n.forEach((function(e,t){return r(t,e,n)}))}function i(n){var r=n[_];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:u(n)?2:l(n)?3:0}function a(n,r){return 2===i(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function c(n,r,e){var t=i(n);2===t?n.set(r,e):3===t?(n.delete(r),n.add(e)):n[r]=e}function u(n){return R&&n instanceof Map}function l(n){return L&&n instanceof Set}function s(n){return n.o||n.t}function f(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=z(n);delete r[_];for(var e=F(r),t=0;t<e.length;t++){var o=e[t],i=r[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(r[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:n[o]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),A(n)||r(n)||!t(n)||(i(n)>1&&(n.set=n.add=n.clear=n.delete=p),Object.freeze(n),e&&o(n,(function(n,r){return d(r,!0)}),!0)),n}function p(){n(2)}function A(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function h(r){var e=Z[r];return e||n(18,r),e}function v(){return q}function b(n,r){r&&(h("Patches"),n.u=[],n.s=[],n.v=r)}function m(n){y(n),n.p.forEach(g),n.p=null}function y(n){n===q&&(q=n.l)}function C(n){return q={p:[],l:q,h:n,m:!0,_:0}}function g(n){var r=n[_];0===r.i||1===r.i?r.j():r.g=!0}function E(r,e){e._=e.p.length;var o=e.p[0],i=void 0!==r&&r!==o;return e.h.O||h("ES5").S(e,r,i),i?(o[_].P&&(m(e),n(4)),t(r)&&(r=w(e,r),e.l||P(e,r)),e.u&&h("Patches").M(o[_],r,e.u,e.s)):r=w(e,o,[]),m(e),e.u&&e.v(e.u,e.s),r!==D?r:void 0}function w(n,r,e){if(A(r))return r;var t=r[_];if(!t)return o(r,(function(o,i){return I(n,t,r,o,i,e)}),!0),r;if(t.A!==n)return r;if(!t.P)return P(n,t.t,!0),t.t;if(!t.I){t.I=!0,t.A._--;var i=4===t.i||5===t.i?t.o=f(t.k):t.o;o(3===t.i?new Set(i):i,(function(r,o){return I(n,t,i,r,o,e)})),P(n,i,!1),e&&n.u&&h("Patches").R(t,e,n.u,n.s)}return t.o}function I(n,e,o,i,u,l){if(r(u)){var s=w(n,u,l&&e&&3!==e.i&&!a(e.D,i)?l.concat(i):void 0);if(c(o,i,s),!r(s))return;n.m=!1}if(t(u)&&!A(u)){if(!n.h.N&&n._<1)return;w(n,u),e&&e.A.l||P(n,u)}}function P(n,r,e){void 0===e&&(e=!1),n.h.N&&n.m&&d(r,e)}function k(n,r){var e=n[_];return(e?s(e):n)[r]}function S(n,r){if(r in n)for(var e=Object.getPrototypeOf(n);e;){var t=Object.getOwnPropertyDescriptor(e,r);if(t)return t;e=Object.getPrototypeOf(e)}}function x(n){n.P||(n.P=!0,n.l&&x(n.l))}function T(n){n.o||(n.o=f(n.t))}function B(n,r,e){var t=u(r)?h("MapSet").T(r,e):l(r)?h("MapSet").F(r,e):n.O?function(n,r){var e=Array.isArray(n),t={i:e?1:0,A:r?r.A:v(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},o=t,i=G;e&&(o=[t],i=H);var a=Proxy.revocable(o,i),c=a.revoke,u=a.proxy;return t.k=u,t.j=c,u}(r,e):h("ES5").J(r,e);return(e?e.A:v()).p.push(t),t}function O(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,a=r[_],u=i(r);if(a){if(!a.P&&(a.i<4||!h("ES5").K(a)))return a.t;a.I=!0,e=j(r,u),a.I=!1}else e=j(r,u);return o(e,(function(r,t){a&&function(n,r){return 2===i(n)?n.get(r):n[r]}(a.t,r)===t||c(e,r,n(t))})),3===u?new Set(e):e}(e)}function j(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return f(n)}var N,q,M="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),R="undefined"!=typeof Map,L="undefined"!=typeof Set,W="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,D=M?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),U=M?Symbol.for("immer-draftable"):"__$immer_draftable",_=M?Symbol.for("immer-state"):"__$immer_state",F=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames),z=Object.getOwnPropertyDescriptors||function(n){var r={};return F(n).forEach((function(e){r[e]=Object.getOwnPropertyDescriptor(n,e)})),r},Z={},G={get:function(n,r){if(r===_)return n;var e=s(n);if(!a(e,r))return function(n,r,e){var t,o=S(r,e);return o?"value"in o?o.value:null===(t=o.get)||void 0===t?void 0:t.call(n.k):void 0}(n,e,r);var o=e[r];return n.I||!t(o)?o:o===k(n.t,r)?(T(n),n.o[r]=B(n.A.h,o,n)):o},has:function(n,r){return r in s(n)},ownKeys:function(n){return Reflect.ownKeys(s(n))},set:function(n,r,e){var t=S(s(n),r);if(null==t?void 0:t.set)return t.set.call(n.k,e),!0;if(!n.P){var o=k(s(n),r),i=null==o?void 0:o[_];if(i&&i.t===e)return n.o[r]=e,n.D[r]=!1,!0;if(function(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}(e,o)&&(void 0!==e||a(n.t,r)))return!0;T(n),x(n)}return n.o[r]=e,n.D[r]=!0,!0},deleteProperty:function(n,r){return void 0!==k(n.t,r)||r in n.t?(n.D[r]=!1,T(n),x(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var e=s(n),t=Reflect.getOwnPropertyDescriptor(e,r);return t?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:t.enumerable,value:e[r]}:t},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},H={};o(G,(function(n,r){H[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),H.deleteProperty=function(n,r){return G.deleteProperty.call(this,n[0],r)},H.set=function(n,r,e){return G.set.call(this,n[0],r,e,n[0])};var Y=new(function(){function e(n){this.O=W,this.N=!0,"boolean"==typeof(null==n?void 0:n.useProxies)&&this.setUseProxies(n.useProxies),"boolean"==typeof(null==n?void 0:n.autoFreeze)&&this.setAutoFreeze(n.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var o=e.prototype;return o.produce=function(r,e,o){if("function"==typeof r&&"function"!=typeof e){var i=e;e=r;var a=this;return function(n){var r=this;void 0===n&&(n=i);for(var t=arguments.length,o=Array(t>1?t-1:0),c=1;c<t;c++)o[c-1]=arguments[c];return a.produce(n,(function(n){var t;return(t=e).call.apply(t,[r,n].concat(o))}))}}var c;if("function"!=typeof e&&n(6),void 0!==o&&"function"!=typeof o&&n(7),t(r)){var u=C(this),l=B(this,r,void 0),s=!0;try{c=e(l),s=!1}finally{s?m(u):y(u)}return"undefined"!=typeof Promise&&c instanceof Promise?c.then((function(n){return b(u,o),E(n,u)}),(function(n){throw m(u),n})):(b(u,o),E(c,u))}if(!r||"object"!=typeof r){if((c=e(r))===D)return;return void 0===c&&(c=r),this.N&&d(c,!0),c}n(21,r)},o.produceWithPatches=function(n,r){var e,t,o=this;return"function"==typeof n?function(r){for(var e=arguments.length,t=Array(e>1?e-1:0),i=1;i<e;i++)t[i-1]=arguments[i];return o.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(t))}))}:[this.produce(n,r,(function(n,r){e=n,t=r})),e,t]},o.createDraft=function(e){t(e)||n(8),r(e)&&(e=O(e));var o=C(this),i=B(this,e,void 0);return i[_].C=!0,y(o),i},o.finishDraft=function(n,r){var e=(n&&n[_]).A;return b(e,r),E(void 0,e)},o.setAutoFreeze=function(n){this.N=n},o.setUseProxies=function(r){r&&!W&&n(20),this.O=r},o.applyPatches=function(n,e){var t;for(t=e.length-1;t>=0;t--){var o=e[t];if(0===o.path.length&&"replace"===o.op){n=o.value;break}}var i=h("Patches").$;return r(n)?i(n,e):this.produce(n,(function(n){return i(n,e.slice(t+1))}))},e}()),K=Y.produce;Y.produceWithPatches.bind(Y),Y.setAutoFreeze.bind(Y),Y.setUseProxies.bind(Y),Y.applyPatches.bind(Y),Y.createDraft.bind(Y),Y.finishDraft.bind(Y);const V=K;var X=e(379),$=e.n(X),J=e(434);$()(J.Z,{insert:"head",singleton:!1}),J.Z.locals;var Q=e(394);$()(Q.Z,{insert:"head",singleton:!1}),Q.Z.locals;var nn=e(959);$()(nn.Z,{insert:"head",singleton:!1}),nn.Z.locals;var rn,en=e(712);$()(en.Z,{insert:"head",singleton:!1}),en.Z.locals,function(n){n[n.EMPTY=0]="EMPTY",n[n.STATIC=1]="STATIC",n[n.ACTIVE=2]="ACTIVE"}(rn||(rn={}));var tn,on=function(n,r){for(var e=0,t=r.length,o=n.length;e<t;e++,o++)n[o]=r[e];return n},an=on([],Array(10)).map((function(n){return 0})),cn=on([],Array(24)).map((function(){return on([],an)})),un=function(n){var r=document.createElement("div");return n.forEach((function(n,e){var t=document.createElement("div");t.className="row",n.forEach((function(n,r){var e=document.createElement("div"),o=rn.EMPTY,i=rn.STATIC,a=rn.ACTIVE;switch(n){case o:e.className="cell empty";break;case i:e.className="cell static";break;case a:e.className="cell active";break;default:throw new Error("unidentified cell")}t.appendChild(e)})),r.appendChild(t)})),r.className="board",r},ln=function(n,r){for(var e=0,t=r.length,o=n.length;e<t;e++,o++)n[o]=r[e];return n},sn=function(n){var r=[n.pivot],e=n.forms[n.form].map((function(r){var e=r[0],t=r[1];return[n.pivot[0]+e,n.pivot[1]+t]}));return ln(ln([],r),e)};!function(n){n.CCW="w",n.CW="r",n.LEFT="s",n.RIGHT="f",n.PLUNGE="d"}(tn||(tn={}));var fn=function(n,r,e){switch(e){case tn.CCW:return dn(n,r);case tn.CW:return pn(n,r);case tn.LEFT:return An(n,r);case tn.RIGHT:return hn(n,r);case tn.PLUNGE:return vn(n,r)}},dn=function(n,r){var e=V(n,(function(n){return 0===n.form?n.form=n.forms.length-1:n.form-=1,n})),t=sn(e),o=!0;return t.forEach((function(n){var e=n[0],t=n[1];e>23||r[e][t]===rn.STATIC?o=!1:0!==t&&t!==r[0].length||(o=!1)})),o},pn=function(n,r){var e=V(n,(function(n){return n.form===n.forms.length-1?n.form=0:n.form+=1,n})),t=sn(e),o=!0;return t.forEach((function(n){var e=n[0],t=n[1];e>23||r[e][t]===rn.STATIC?o=!1:0!==t&&t!==r[0].length||(o=!1)})),o},An=function(n,r){var e=V(n,(function(n){return n.pivot[1]-=1,n})),t=sn(e),o=!0;return t.forEach((function(n){var e=n[0],t=n[1];(r[e][t]===rn.STATIC||-1===t)&&(o=!1)})),o},hn=function(n,r){var e=V(n,(function(n){return n.pivot[1]+=1,n}));console.log("constructed rightPc",e);var t=sn(e),o=!0;return t.forEach((function(n){var e=n[0],t=n[1];(r[e][t]===rn.STATIC||t===r[0].length-1)&&(o=!1)})),o},vn=function(n,r){var e=V(n,(function(n){n.pivot[0]+=1})),t=sn(e),o=!0;return t.forEach((function(n){var e=n[0],t=n[1];(e>23||r[e][t]===rn.STATIC)&&(o=!1)})),o},bn=function(n){return V(n,(function(n){n.pivot[0]+=1}))},mn=function(n,r){var e=function(n){return Array.from(n.childNodes).forEach((function(n){Array.from(n.childNodes).forEach((function(n){"cell active"===n.className&&(n.className="cell empty")}))})),n}(n);return function(n,r){return n.forEach((function(n){var e=n[0],t=n[1];r.childNodes[e].childNodes[t].className="cell active"})),r}(sn(r),e)},yn=[];yn.push({pivot:[1,4],form:0,forms:[[[-1,0]],[[0,1]],[[1,0]],[[0,-1]]]});var Cn=function(n){return V(n[Math.floor(Math.random()*n.length)],(function(n){return n}))},gn=document.querySelector("body"),En=V(cn,(function(n){return n})),wn=un(En);gn.appendChild(function(){var n=document.createElement("div");n.className="head";var r=document.createElement("h1");r.textContent="Tetris!",n.appendChild(r);var e=document.createElement("div");e.className="dashboard";var t,o=function(){var n=document.createElement("button");return n.className="start_btn",n.textContent="Click to Start!",n}(),i=function(){var n=document.createElement("button");return n.className="end_btn",n.textContent="Click to End!",n}(),a=function(){var n=document.createElement("button");return n.className="reset_btn",n.textContent="Click to Reset!",n}();function c(){clearInterval(t),e.removeChild(i),e.appendChild(a)}return e.appendChild(o),o.addEventListener("click",(function(){var n=document.querySelector(".board"),r=document.querySelector("body");t=function(n,r,e){var t=Cn(yn),o=cn,i=r;return console.log("board X length",o[0].length),document.addEventListener("keydown",(function(n){switch(n.key){case tn.CCW:fn(t,o,tn.CCW)&&(0===t.form?(t=V(t,(function(n){return n.form=n.forms.length-1,n})),a()):(t=V(t,(function(n){return n.form-=1,n})),a()));break;case tn.CW:fn(t,o,tn.CW)&&(t.form===t.forms.length-1?(t=V(t,(function(n){return n.form=0,n})),a()):(t=V(t,(function(n){return n.form+=1,n})),a()));break;case tn.LEFT:fn(t,o,tn.LEFT)&&(0===t.pivot[1]||(t=V(t,(function(n){return n.pivot[1]-=1,n}))),a());break;case tn.RIGHT:fn(t,o,tn.RIGHT)&&(t.pivot[1]===o[0].length-1||(t=V(t,(function(n){return n.pivot[1]+=1,n})),a()));break;case tn.PLUNGE:fn(t,o,tn.PLUNGE)&&(t=bn(t),a())}})),setInterval((function(){fn(t,o,tn.PLUNGE)?(t=bn(t),a()):(o=function(n,r){var e=sn(n);return V(r,(function(n){e.forEach((function(r){var e=r[0],t=r[1];n[e][t]=rn.STATIC}))}))}(t,o),n.removeChild(i),i=un(o),function(n,r){var e=sn(n),t=!0;return e.forEach((function(n){var e=n[0],o=n[1];r[e][o]===rn.STATIC&&(t=!1)})),t}(t=Cn(yn),o)&&function(n){return n.reduce((function(n,r){return r!==rn.STATIC&&n}),!0)}(o[0])||e(),i=mn(i,t),n.appendChild(i))}),100);function a(){n.removeChild(i),i=mn(i,t),n.appendChild(i)}}(r,n,c),e.removeChild(o),e.appendChild(i)})),i.addEventListener("click",(function(){c()})),a.addEventListener("click",(function(){!function(){var n=document.querySelector("body"),r=document.querySelector(".board");n.removeChild(r)}(),function(){var n=V(cn,(function(n){return n})),r=un(n);document.querySelector("body").appendChild(r)}(),e.removeChild(a),e.appendChild(o)})),n.appendChild(e),n}()),gn.appendChild(wn)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,